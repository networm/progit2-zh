[[_git_stashing]]
=== 储藏与清理

经常性地，当你已经在你项目的一部分上工作时，所有东西都进入了混乱的状态，这时你想要切换到别的分支做一点别的事情。
问题是，你不想仅仅因为过会儿回到这一点而将做了一半儿的工作做一次提交。
针对这个问题的答案是 `git stash` 命令。

储藏会处理你工作目录的脏的状态 - 那就是，你修改的追踪文件与暂存改动 - 然后将未完成的修改保存到一个栈上，你可以在任何时候重演这些改动。

==== 储藏你的工作

为了演示，你将进入你的项目并开始改动几个文件，然后可能暂存其中的一个改动。
如果你运行 `git status`，你可以看到有改动的状态：

[source,console]
----
$ git status
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

	modified:   index.html

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

	modified:   lib/simplegit.rb
----

现在你想要切换分支，但是你还不想要提交你之前的工作；所以你会储藏修改。
将新的储藏推送到你的栈上，运行 `git stash` 或 `git stash save`：

[source,console]
----
$ git stash
Saved working directory and index state \
  "WIP on master: 049d078 added the index file"
HEAD is now at 049d078 added the index file
(To restore them type "git stash apply")
----

你的工作目录是干净的了：

[source,console]
----
$ git status
# On branch master
nothing to commit, working directory clean
----

在这时，你能够轻易地切换分支并在其他地方工作；你的修改存储在你的栈上。
要查看你你的储藏，你可以使用 `git stash list`：

[source,console]
----
$ git stash list
stash@{0}: WIP on master: 049d078 added the index file
stash@{1}: WIP on master: c264051 Revert "added file_size"
stash@{2}: WIP on master: 21d80a5 added number to log
----

在本例中，有两个之前做的储藏，所以你接触到了三个不同的储藏工作。
你可以将你刚刚储藏的工作重演出来，通过原来 stash 命令的帮助提示中的命令：`git stash apply`。
如果你想要应用其中一个更旧的储藏，你可以通过名字指定它，像这样：`git stash apply stash@{2}`。
如果你不指定一个储藏，Git 假定是最近的储藏并尝试应用它：

[source,console]
----
$ git stash apply
# On branch master
# Changed but not updated:
#   (use "git add <file>..." to update what will be committed)
#
#      modified:   index.html
#      modified:   lib/simplegit.rb
#
----

你可以看到 Git 重新修改了当你保存储藏时撤消的文件。
这本例中，当你尝试应用储藏时有一个干净的工作目录，并且你尝试将它应用在你保存它时所在的分支；但是有一个干净的工作目录与应用在同一分支并不是成功应用储藏的充分必要条件。
你可以在一个分支上保存一个储藏，切换到另一个分支，然后尝试重演这些修改。
当你应用储藏时你的工作目录中也可以有修改与未提交的文件 - 如果任何东西不能干净地应用 Git 会给你合并冲突。

你的文件的改动被重新应用了，但是你之前暂存的文件却没有重新暂存。
想要那样的话，你必须用用 `--index` 选项来运行 `git stash apply` 命令，告诉命令尝试重新应用暂存的修改。
如果你已经那样做了，那么你将回到你原来的位置：

[source,console]
----
$ git stash apply --index
# On branch master
# Changes to be committed:
#   (use "git reset HEAD <file>..." to unstage)
#
#      modified:   index.html
#
# Changed but not updated:
#   (use "git add <file>..." to update what will be committed)
#
#      modified:   lib/simplegit.rb
#
----

应用选项只会尝试应用暂存的工作 - 在你的堆栈上还有它。
为了移除它，你可以运行 `git stash drop`，加上将要移除的储藏的名字：

[source,console]
----
$ git stash list
stash@{0}: WIP on master: 049d078 added the index file
stash@{1}: WIP on master: c264051 Revert "added file_size"
stash@{2}: WIP on master: 21d80a5 added number to log
$ git stash drop stash@{0}
Dropped stash@{0} (364e91f3f268f0900bc3ee613f9f733e82aaed43)
----

你也可以运行 `git stash pop` 来应用储藏然后立即从你的栈上扔掉它。

==== 创造性的储藏

有几个储藏的变种可能也很有用。第一个选项是相当流行的 `stash save` 命令的 `--keep-index` 选项。它告诉 Git 不要储藏任何通过 `git add` 命令的你已经暂存的任何东西。

当你做了几个改动并只想提交其中的一部分，过一会儿在回来处理剩余改动时，这个功能会很有用。

[source,console]
----
$ git status -s
M  index.html
 M lib/simplegit.rb

$ git stash --keep-index
Saved working directory and index state WIP on master: 1b65b17 added the index file
HEAD is now at 1b65b17 added the index file

$ git status -s
M  index.html
----

另一个你非常想用储藏做的的普通事情是像储藏追踪文件一样也储藏未追踪文件。默认情况下，`git stash` 只会储藏已经在索引中的文件。如果你指定 `--include-untracked` 或 `-u` 标记，Git 也会储藏任何你创建的未追踪文件。

[source,console]
----
$ git status -s
M  index.html
 M lib/simplegit.rb
?? new-file.txt

$ git stash -u
Saved working directory and index state WIP on master: 1b65b17 added the index file
HEAD is now at 1b65b17 added the index file

$ git status -s
$
----

最终，如果你指定了 `--patch` 标记，Git 不会储藏所有修改过的任何东西，但是会交互式地提示你哪些改动你想要储藏、哪些改动需要保存在工作目录中。

[source,console]
----
$ git stash --patch
diff --git a/lib/simplegit.rb b/lib/simplegit.rb
index 66d332e..8bb5674 100644
--- a/lib/simplegit.rb
+++ b/lib/simplegit.rb
@@ -16,6 +16,10 @@ class SimpleGit
         return `#{git_cmd} 2>&1`.chomp
       end
     end
+
+    def show(treeish = 'master')
+      command("git show #{treeish}")
+    end

 end
 test
Stash this hunk [y,n,q,a,d,/,e,?]? y

Saved working directory and index state WIP on master: 1b65b17 added the index file
----


==== 从储藏创建一个分支

如果你储藏了一些工作，将它留在那儿了一会儿，然后继续在你储藏的分支上工作，在重新应用工作时你可能会有问题。
如果应用尝试修改你刚刚修改的文件，你会得到一个合并冲突并不得不尝试解决它。
如果你想要一个轻松的方式来再次测试储藏的改动，你可以运行 `git stash branch`，将会为你创建一个新分支，检出当你储藏你的工作时所在的提交，重新在那应用你的工作，然后在应用成功后扔掉储藏：

[source,console]
----
$ git stash branch testchanges
Switched to a new branch "testchanges"
# On branch testchanges
# Changes to be committed:
#   (use "git reset HEAD <file>..." to unstage)
#
#      modified:   index.html
#
# Changed but not updated:
#   (use "git add <file>..." to update what will be committed)
#
#      modified:   lib/simplegit.rb
#
Dropped refs/stash@{0} (f0dfc4d5dc332d1cee34a634182e168c4efc3359)
----

这是一个轻松恢复储藏工作并在新分支上工作的优雅的快捷方式。

[[_git_clean]]
==== 清理你的工作目录

最终，你可能不想要储藏你的工作目录中一些工作或文件，但是只想要移除它们。`git clean`  命令将会为你做到。

有一些通用的原因比如说为了移除由合并或外部工具生成的东西或是为了运行一个干净的构建而移除之前构建的残留。

使用这个命令时你需要非常仔细，因为它被设计为从你的工作目录中移除未被追踪的文件。如果你改变主意了，不会经常能找回那些文件的内容。一个安全一些的选项是运行 `git stash --all` 来移除每一样东西并存放在栈中。

假定你想要移除无用文件或清理你的工作目录，你可以使用 `git clean` 这样做。为了移除在你的工作目录中所有未追踪的文件，你可以运行 `git clean -f -d`，将会移除文件与任何变成空的子目录做为结果。`-f` 意味着 'force' 或 “真的这样做”。

如果你只是想要看看它会做什么，你可以使用 `-n` 选项来运行命令，这意味着 ``做一次演习然后告诉我你 _将要_ 移除什么''。

[source,console]
----
$ git clean -d -n
Would remove test.o
Would remove tmp/
----

默认情况下，`git clean` 命令只会移除没有忽略的未追踪文件。任何与你的 `.gitiignore` 或其他忽略文件中的模式匹配的文件都不会被移除。如果你也想要移除那些文件，例如为了做一次完全干净的构建而移除所有由构建生成的 `.o` 文件，你可以增加一个 `-x` 给 clean 命令。

[source,console]
----
$ git status -s
 M lib/simplegit.rb
?? build.TMP
?? tmp/

$ git clean -n -d
Would remove build.TMP
Would remove tmp/

$ git clean -n -d -x
Would remove build.TMP
Would remove test.o
Would remove tmp/
----

如果你不知道 `git clean` 命令将会做什么，在将 `-n` 改为 `-f` 真正做之前总是先用 `-n` 来运行它做双重检查。另一个小心处理过程的方式是使用 `-i` 或 ``interactive'' 标记来运行它。

这将会以交互模式运行 clean 命令。

[source,console]
----
$ git clean -x -i
Would remove the following items:
  build.TMP  test.o
*** Commands ***
    1: clean                2: filter by pattern    3: select by numbers    4: ask each             5: quit
    6: help
What now>
----

这种方式下你可以分别地检查每一个文件或者交互地指定删除的模式。
