[[_subtree_merge]]
===== 子树合并

子树合并的思想是您有两个项目，并且其中一个映射到另一个项目的一个子目录，或者反过来也行。
当您执行一个子树合并时，Git 通常可以自动计算出其中一个是另外一个的子树从而实现正确的合并。

我们来看一个例子如何将一个项目加入到一个已存在的项目中，然后将第二个项目的代码合并到第一个项目的子目录中。

首先，我们将 Rack 应用添加到您的项目里。
我们把 Rack 项目作为一个远程的引用添加到我们的项目里，然后检出到它自己的分支。

[source,console]
----
$ git remote add rack_remote https://github.com/rack/rack
$ git fetch rack_remote
warning: no common commits
remote: Counting objects: 3184, done.
remote: Compressing objects: 100% (1465/1465), done.
remote: Total 3184 (delta 1952), reused 2770 (delta 1675)
Receiving objects: 100% (3184/3184), 677.42 KiB | 4 KiB/s, done.
Resolving deltas: 100% (1952/1952), done.
From https://github.com/rack/rack
 * [new branch]      build      -> rack_remote/build
 * [new branch]      master     -> rack_remote/master
 * [new branch]      rack-0.4   -> rack_remote/rack-0.4
 * [new branch]      rack-0.9   -> rack_remote/rack-0.9
$ git checkout -b rack_branch rack_remote/master
Branch rack_branch set up to track remote branch refs/remotes/rack_remote/master.
Switched to a new branch "rack_branch"
----

现在在我们的 `rack_branch` 分支里就有 Rack 项目的根目录，而我们的项目则在 `master` 分支里。
如果您从一个分支切换到另一个分支，您可以看到它们的项目根目录是不同的：

[source,console]
----
$ ls
AUTHORS         KNOWN-ISSUES   Rakefile      contrib         lib
COPYING         README         bin           example         test
$ git checkout master
Switched to branch "master"
$ ls
README
----

这个是一个比较奇怪的概念。并不是仓库中的所有分支都是必须属于同一个项目的分支，这并不常见，因为没啥用，但是却是在不同分支里包含两条完全不同提交历史的最简单的方法。

在这个例子中，我们希望将 Rack 项目拉到 `master` 项目中作为一个子目录。
我们可以在 Git 中执行 `git read-tree` 来实现。
您可以在 <<_git_internals>> 中查看更多 `read-tree` 的相关信息，现在您只需要知道它会读取一个分支的根目录树到当前的暂存区和工作目录里。
先切回您的 `master` 分支，将 `rack` 分支拉取到我们项目的 `master` 分支中的 `rack` 子目录。

[source,console]
----
$ git read-tree --prefix=rack/ -u rack_branch
----

当我们提交时，那个子目录中拥有所有 Rack 项目的文件 —— 就像我们直接从压缩包里复制出来的一样。
有趣的是您可以很容易地将一个分支的变更合并到另一个分支里。
所以，当 Rack 项目有更新时，我们可以切换到那个分支来拉取上游的变更。

[source,console]
----
$ git checkout rack_branch
$ git pull
----

接着，我们可以将这些变更合并回我们的 `master` 分支。
使用 `git merge -s subtree` 不会有问题；但是 Git 也会将历史记录合并起来，这可能不是我们想要的。
在 `-s subtree` 选项后面加上 `--squash` 和 `--no-commit` 选项就可以拉取变更并且预填充提交信息。

[source,console]
----
$ git checkout master
$ git merge --squash -s subtree --no-commit rack_branch
Squash commit -- not updating HEAD
Automatic merge went well; stopped before committing as requested
----

Rack 项目中的所有改动都已经合并入并准备本地提交。
你也可以做相反的事情 - 在你的 master 分支中 `rack` 子目录中做一些改动然后过会儿将它们合并到你的 `rack_branch` 分支并提交它们给维护者或推送它们到上游。

这给我们一种使用类似子模块的工作流而不用使用子模块（我们将会在 <<_git_submodules>> 介绍）。我们可以用分支的形式保存其他项目在我们的仓库中，并且偶尔用子树合并它们到我们的项目中。某种程度上它很漂亮，例如所有的代码提交到单一的地方。然而，它有一些其他的缺点比如它有一点复杂、在重新整合改动时容易犯错、或者不小心会推送分支到一个不相关的仓库中。

另一个有点奇怪的事情是获取在你的 `rack` 子目录与你的 `rack_branch` 分支中代码的区别 - 为了查看你是否需要合并它们 - 你不能使用普通的 `diff` 命令。
反而，你必须运行 `git diff-tree` 加上你想要比较的分支：

[source,console]
----
$ git diff-tree -p rack_branch
----

或者，比较你的 `rack` 子目录与服务器上你上次抓取的 `master` 分支，你可以运行

[source,console]
----
$ git diff-tree -p rack_remote/master
----
