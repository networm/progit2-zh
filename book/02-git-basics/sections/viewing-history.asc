[[_viewing_history]]
=== 查看提交历史

在你创建完几次提交后，或者你已经克隆了一个已经有提交历史的仓库，你可能会想看看之前发生了什么。
做这件事最基本和最强力的工具就是 `git log` 命令。

这些例子使用了名为 ``simplegit'' 的很简单的仓库。
运行下面的命令获得这个仓库：

[source,console]
----
git clone https://github.com/schacon/simplegit-progit
----

当你在仓库目录下执行 `git log`，你会得到类似以下的输出：(((git commands, log)))

[source,console]
----
$ git log
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    changed the version number

commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 16:40:33 2008 -0700

    removed unnecessary test

commit a11bef06a3f659402fe7563abf99ad00de2209e6
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 10:31:28 2008 -0700

    first commit
----

默认不加参数的情况下，`git log` 按照时间反序列出仓库中所有的提交 - 也就是说，最新的提交显示在最上面。
正如你看到的，这个命令列出的每一个提交中都包含 SHA-1 校验码、作者名字、作者邮箱、写入日期、提交信息。

`git log` 命令有很多不同种类的选项可以帮助你找到你想要的。
这里，我们会展示一些非常流行的。

其中最有用的一个选项是 `-p`，可以显示出每一个提交的差异。
你也可以使用 `-2` 选项，可以只显示最后两次提交：

[source,console]
----
$ git log -p -2
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    changed the version number

diff --git a/Rakefile b/Rakefile
index a874b73..8f94139 100644
--- a/Rakefile
+++ b/Rakefile
@@ -5,7 +5,7 @@ require 'rake/gempackagetask'
 spec = Gem::Specification.new do |s|
     s.platform  =   Gem::Platform::RUBY
     s.name      =   "simplegit"
-    s.version   =   "0.1.0"
+    s.version   =   "0.1.1"
     s.author    =   "Scott Chacon"
     s.email     =   "schacon@gee-mail.com"
     s.summary   =   "A simple gem for using Git in Ruby code."

commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 16:40:33 2008 -0700

    removed unnecessary test

diff --git a/lib/simplegit.rb b/lib/simplegit.rb
index a0a60ae..47c6340 100644
--- a/lib/simplegit.rb
+++ b/lib/simplegit.rb
@@ -18,8 +18,3 @@ class SimpleGit
     end

 end
-
-if $0 == __FILE__
-  git = SimpleGit.new
-  puts git.show
-end
\ No newline at end of file
----

这个选项显示同样的信息，但是在每一个信息后有一个差异。
这在代码审核与快速浏览合作者增加的一连串提交时会非常有用。
你可以使用 `git log` 的一些概览选项。
例如，如果你想要看每一个提交的简短统计，你可以使用 `--stat` 选项：

[source,console]
----
$ git log --stat
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    changed the version number

 Rakefile | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 16:40:33 2008 -0700

    removed unnecessary test

 lib/simplegit.rb | 5 -----
 1 file changed, 5 deletions(-)

commit a11bef06a3f659402fe7563abf99ad00de2209e6
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 10:31:28 2008 -0700

    first commit

 README           |  6 ++++++
 Rakefile         | 23 +++++++++++++++++++++++
 lib/simplegit.rb | 25 +++++++++++++++++++++++++
 3 files changed, 54 insertions(+)
----

正如你所看到的，`--stat` 选项在每一个提交下显示修改的文件列表，多少文件发生了改动，文件中多少行添加与删除。
它也会在结尾显示所有信息的概览。

另一个非常有用的选项是 `--pretty`。
这个选项修改与默认不同的日志输出格式。
有几个预建的选项可以供你使用。
`oneline` 选项可以将每一个提交显示为一行，在你查看大量提交时会相当有用。
此外，`short`、`full` 与 `fuller` 选项显示的输出差不多，但分别会多或少一点信息：

[source,console]
----
$ git log --pretty=oneline
ca82a6dff817ec66f44342007202690a93763949 changed the version number
085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7 removed unnecessary test
a11bef06a3f659402fe7563abf99ad00de2209e6 first commit
----

最有意思的选项是 `format`，允许你自己自定义日志输出格式。
当你需要生成需要机器解析的输出时会特别有用 - 因为你需要明确地指定格式，你知道它并不会随着 Git 的版本更新而变化：(((log formatting)))

[source,console]
----
$ git log --pretty=format:"%h - %an, %ar : %s"
ca82a6d - Scott Chacon, 6 years ago : changed the version number
085bb3b - Scott Chacon, 6 years ago : removed unnecessary test
a11bef0 - Scott Chacon, 6 years ago : first commit
----

<<pretty_format>> 列出了 format 有用的一些选项

[[pretty_format]]
.`git log --pretty=format` 有用的一些选项
[cols="1,4",options="header"]
|================================
| Option   | Description of Output
| `%H`     | Commit hash
| `%h`     | Abbreviated commit hash
| `%T`     | Tree hash
| `%t`     | Abbreviated tree hash
| `%P`     | Parent hashes
| `%p`     | Abbreviated parent hashes
| `%an`    | Author name
| `%ae`    | Author e-mail
| `%ad`    | Author date (format respects the –date= option)
| `%ar`    | Author date, relative
| `%cn`    | Committer name
| `%ce`    | Committer email
| `%cd`    | Committer date
| `%cr`    | Committer date, relative
| `%s`     | Subject
|================================

你可能会对 _author_ 与 _committer_ 的区别感到惊奇。
作者是最开始写下工作的人，然而提交者是最后应用了工作的人。
所以，当你将补下提交到工程时，一个核心人员应用了补丁，你们两个人都会得到赞扬 - 你作为作者，核心人员作为提交者。
我们将会在 <<_distributed_git>> 了解到它们的一点儿区别。

当使用另一个 `log` 选项 `--graph` 时，oneline 与其他 format 选项会尤其有用。
这个选项会将你的分支与合并历史显示为漂亮的 ASCII 图形。

[source,console]
----
$ git log --pretty=format:"%h %s" --graph
* 2d3acf9 ignore errors from SIGCHLD on trap
*  5e3ee11 Merge branch 'master' of git://github.com/dustin/grit
|\
| * 420eac9 Added a method for getting the current branch.
* | 30e367c timeout code and tests
* | 5a09431 add timeout protection to grit
* | e1193f8 support for heads with slashes in them
|/
* d6016bc require time for xmlschema
*  11d191e Merge branch 'defunkt' into local
----

当我们进入到下一章分支与合并时这种类型的图会变得非常有意思。

那些只是 `git log` 中一些简单的输出格式选项 - 还有更多。
<<log_options>> 列出了到现在为止我们包含的，同样其他普通的格式化选项也很有用，要看它们如何修改 log 命令的输出。

[[log_options]]
.`git log` 的普通选项
[cols="1,4",options="header"]
|================================
| Option            | Description
| `-p`              | Show the patch introduced with each commit.
| `--stat`          | Show statistics for files modified in each commit.
| `--shortstat`     | Display only the changed/insertions/deletions line from the --stat command.
| `--name-only`     | Show the list of files modified after the commit information.
| `--name-status`   | Show the list of files affected with added/modified/deleted information as well.
| `--abbrev-commit` | Show only the first few characters of the SHA-1 checksum instead of all 40.
| `--relative-date` | Display the date in a relative format (for example, ``2 weeks ago'') instead of using the full date format.
| `--graph`         | Display an ASCII graph of the branch and merge history beside the log output.
| `--pretty`        | Show commits in an alternate format. Options include oneline, short, full, fuller, and format (where you specify your own format).
|================================

==== 限制日志输出

对于输出格式选项，`git log` 有一些有用的限制选项 - 就是说，让你只能看到一部分提交的选项。
你已经看到了一个这样的选项 - `-2` 选项，只显示出最后两次提交。
实际上，你可以使用 `-<n>`，其中的 `n` 是任意的整数可以显示出最后的 `n` 次提交。
事实上，你不太可能经常使用它，因为 Git 默认将所有的输出通过分页器显示出来，所以你一次只会看到一页。

然而，时间限制选项如 `--since` 与 `--until` 是很有用的。
例如，这个命令显示出最近两周所做的提交：

[source,console]
----
$ git log --since=2.weeks
----

这个命令可以使用很多不同的格式 - 你可以指定一个日期如 `"2008-01-15"`，或者一个相对的日期如 `"2 years 1 day 3 minutes ago"`。 

你也可以用特定的条件来过滤匹配提交。
`--author` 选项允许你过滤特定的作者，`--grep` 选项允许你在提交信息中搜索关键字。
（注意如果你想要同时指定 author 与 grep 选项，你必须添加 `--all-match` 选项否则命令只能匹配其中一个条件。）

另一个真的很有帮助的过滤器是 `-S` 选项，后面接一个字符串参数，并且只显示包含添加或删除这个字符串的提交。例如，如果你想要找出添加或删除某个函数的引用的最后一次提交，你可以使用：

[source,console]
----
$ git log -Sfunction_name
----

`git log` 中最后一个很有用的选项作为过滤器是路径。
如果你想要指定一个目录或文件名，你可以将日志输出限制在对那些文件进行改动的提交。
这通常是作为最后一个选项，并且以双横线开头（`--`）以将路径与其他选项分开。

在 <<limit_options>> 中我们将会列出这些和其他一少部分普通选项作为参考。

[[limit_options]]
.`git log` 限制输出选项
[cols="2,4",options="header"]
|================================
| Option                | Description
| `-(n)`                | Show only the last n commits
| `--since`, `--after`  | Limit the commits to those made after the specified date.
| `--until`, `--before` | Limit the commits to those made before the specified date.
| `--author`            | Only show commits in which the author entry matches the specified string.
| `--committer`         | Only show commits in which the committer entry matches the specified string.
| `--grep`              | Only show commits with a commit message containing the string
| `-S`                  | Only show commits adding or removing code matching the string
|================================

例如，如果你想查看 Git 源代码仓库中在 2008 年十月里 Junio Hamano 修改测试文件的非合并提交，你可以运行下面类似的命令：(((log filtering)))

[source,console]
----
$ git log --pretty="%h - %s" --author=gitster --since="2008-10-01" \
   --before="2008-11-01" --no-merges -- t/
5610e3b - Fix testcase failure when extended attributes are in use
acd3b9e - Enhance hold_lock_file_for_{update,append}() API
f563754 - demonstrate breakage of detached checkout with symbolic link HEAD
d1a43f2 - reset --hard/read-tree --reset -u: remove unmerged new paths
51a94af - Fix "checkout --track -b newbranch" on detached HEAD
b0ad11e - pull: allow "git pull origin $something:$current_branch" into an unborn branch
----

在 Git 源代码历史中大约有 40,000 条提交，这条命令只显示出了符合条件的 6 次提交。
